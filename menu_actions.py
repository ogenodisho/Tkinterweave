'''
This menu_actions.py module encapsulates all of the
responses to events generated by interacting with
tkinterweave's menu system.
'''

from Tkinter import *
import tkFileDialog
import utils
import colors
import global_configs
import dimensions

# Called when file > new is clicked
# Reset the img to one color
def do_new():
    width = global_configs.IMG.width()
    height = global_configs.IMG.height()
    horizontal_line = "{" + " ".join([colors.BLACK]*width) + "}"
    global_configs.IMG.put(" ".join([horizontal_line]*height))

    # reset the vertical reflector
    for i in range(dimensions.PI_HEIGHT):
        global_configs.IMG.put(colors.GOLDENROD, (dimensions.PI_WIDTH / 2, i))

# THIS TAKES FOR FUCKING EVER
def do_open():
    opened_image = PhotoImage(file=tkFileDialog.askopenfilename(filetypes=[('GIF image', '*.gif')]))

    # copy the opened image into the current one
    for i in range(opened_image.width()):
        for j in range(opened_image.height()):
            global_configs.IMG.put(utils.rgb_to_hex(opened_image.get(i, j)), (i, j))
    
    # restore the vertical reflector while preserving overlaps
    rgb_black = utils.hex_to_rgb(colors.BLACK)
    for i in range(dimensions.PI_HEIGHT):
        if global_configs.IMG.get(dimensions.PI_WIDTH / 2, i) == rgb_black:
            global_configs.IMG.put(colors.GOLDENROD, (dimensions.PI_WIDTH / 2, i))

def do_save():
    filename_to_save = tkFileDialog.asksaveasfilename(filetypes=[('GIF image', '*.gif')])
    if not filename_to_save.endswith(".gif"):
         filename_to_save += ".gif"
    
    # delete the vertical reflector while preserving overlaps
    rgb_goldenrod = utils.hex_to_rgb(colors.GOLDENROD)
    for i in range(dimensions.PI_HEIGHT):
        if global_configs.IMG.get(dimensions.PI_WIDTH / 2, i) == rgb_goldenrod:
            global_configs.IMG.put(colors.BLACK, (dimensions.PI_WIDTH / 2, i))
        
    global_configs.IMG.write(filename_to_save, format="gif")

    # reset the vertical reflector
    for i in range(dimensions.PI_HEIGHT):
        global_configs.IMG.put(colors.GOLDENROD, (dimensions.PI_WIDTH / 2, i))

def do_cut():
    print "CUT"

def do_copy():
    print "COPY"

def do_paste():
    print "PASTE"

# window param - the window to draw the
# about window with respect to.
def do_about(window):
    geometry = utils.get_window_geometry(window)
    toplevel = Toplevel()
    toplevel.title("About Tkinterweave")
    toplevel.geometry("%dx%d+%d+%d" % (260, 150, geometry[2] + 30, geometry[3] + 80))
    label1 = Label(toplevel, text="Tkinterweave is a shitty desktop application made to trick CS101 students into thinking that tkinter is useful.\n", wraplength=200, anchor=W, justify=CENTER)
    label1.pack()
    label2 = Label(toplevel, text="Brought to you by:\nOgen Odisho & Krasni Shrivastava\n\nCopyright (c) 2015.", wraplength=200, anchor=W, justify=CENTER)
    label2.pack()
